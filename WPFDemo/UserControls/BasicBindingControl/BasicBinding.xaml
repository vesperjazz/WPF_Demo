<usercontrols:UserControlBase xmlns:usercontrols="clr-namespace:WPFDemo.UserControls"
                              x:Class="WPFDemo.UserControls.BasicBindingControl.BasicBinding"
                              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                              xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                              xmlns:local="clr-namespace:WPFDemo"
                              xmlns:sys="clr-namespace:System;assembly=mscorlib"
                              xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                              mc:Ignorable="d" d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <Grid.Resources>
            <!-- If a key is provided on the style resource, explicit referral by the controls is required to apply the styling. -->
            <!-- If no key is provided, all ComboBox within this Grid will have its style applied with this. -->
            <Style x:Key="ComboBoxStyle" TargetType="{x:Type ComboBox}">
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>

            <Style x:Key="CenterTextBoxStyle" TargetType="{x:Type TextBox}">
                <Setter Property="VerticalContentAlignment" Value="Center"/>
            </Style>

            <!-- BasedOn can be used to build upon existing styles to prevent duplicate setters. -->
            <Style x:Key="ErrorTextBoxStyle" TargetType="TextBox" 
                   BasedOn="{StaticResource CenterTextBoxStyle}">
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="ToolTip"
                                Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
        </Grid.Resources>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="86"/>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="20"/>
            <ColumnDefinition Width="80"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Label Grid.Row="0" Grid.Column="0" 
               Content="First Name: " 
               Margin="{StaticResource TopMarginSeparation}"/>
        <!-- All bindings under the sun are based upon the View's DataContext, in this case the PersonInfo. -->
        <!-- Target is the Control's dependency property, in this case TextBox's Text property. -->
        <!-- Source is the DataContext's property, to which the target binds to, in this case PersonInfo's FirstName property. -->
        <!-- UpdateSourceTrigger's default option is control dependent, e.g. TextBox's Default in this case is the same as LostFocus. -->
        <TextBox Grid.Row="0" Grid.Column="1"
                 Name="FirstNameTxtBox" 
                 MaxLength="15"
                 Margin="{StaticResource TopMarginSeparation}"
                 Style="{StaticResource CenterTextBoxStyle}"
                 Text="{Binding FirstName, UpdateSourceTrigger=LostFocus}"/>
        <Label Grid.Row="0" Grid.Column="3" 
               Content="Last Name: "
               Margin="{StaticResource TopMarginSeparation}"/>
        <TextBox Grid.Row="0" Grid.Column="4"
                 Name="LastNameTxtBox" 
                 MaxLength="15"
                 Margin="{StaticResource TopMarginSeparation}"
                 Style="{StaticResource ErrorTextBoxStyle}"
                 Text="{Binding LastName, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, ValidatesOnExceptions=True, NotifyOnValidationError=True}">
            <!-- The following is exactly the same as above, just a different way of defining. -->
            <!--<TextBox.Text>
                <Binding Path="LastName" 
                         UpdateSourceTrigger="PropertyChanged"
                         ValidatesOnDataErrors="True"
                         ValidatesOnExceptions="True"
                         NotifyOnValidationError="True">
                </Binding>
            </TextBox.Text>-->
        </TextBox>

        <DockPanel Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2"
                   Margin="{StaticResource TopMarginSeparation}">
            <Label Content="First Name LostFocus/Default: "/>
            <TextBlock VerticalAlignment="Center" 
                       FontWeight="Bold"
                       Text="{Binding FirstName, FallbackValue='Fallback Text'}"/>
        </DockPanel>
        <DockPanel Grid.Row="1" Grid.Column="3" Grid.ColumnSpan="2"
                   Margin="{StaticResource TopMarginSeparation}">
            <Label Content="Last Name PropertyChanged: "/>
            <TextBlock VerticalAlignment="Center" 
                       FontWeight="Bold"
                       Text="{Binding LastName, FallbackValue='Fallback Text'}"/>
        </DockPanel>
        
        <Label Grid.Row="2" Grid.Column="0" 
               Content="Gender: "
               Margin="{StaticResource TopMarginSeparation}"/>
        <!-- Simple primitive type binding, e.g. a list of strings, integers and so on. -->
        <ComboBox Grid.Row="2" Grid.Column="1" 
                  Margin="{StaticResource TopMarginSeparation}"
                  Style="{StaticResource ComboBoxStyle}"
                  ItemsSource="{x:Static local:CodeTables.Genders}"
                  SelectedItem="{Binding SelectedGender}"/>
        <Label Grid.Row="2" Grid.Column="3" 
               Content="Job: "
               Margin="{StaticResource TopMarginSeparation}"/>
        <!-- Complex object binding, e.g. a list of objects with multiple properties per object. -->
        <!-- SelectedValuePath tells the ComboBox control which property to pick within the Job object. -->
        <!-- SelectedValue will be the source to which the ComboBox will assign the value of SelectedValuePath to. -->
        <ComboBox Grid.Row="2" Grid.Column="4" 
                  Margin="{StaticResource TopMarginSeparation}"
                  Style="{StaticResource ComboBoxStyle}"
                  ItemsSource="{x:Static local:CodeTables.Jobs}"
                  DisplayMemberPath="Description"
                  SelectedItem="{Binding SelectedJob}"
                  SelectedValuePath="ID"
                  SelectedValue="{Binding SelectedJobID}"/>

        <Label Grid.Row="3" Grid.Column="0"
               Content="Date of Birth: "
               Margin="{StaticResource TopMarginSeparation}"/>
        <DatePicker Grid.Row="3" Grid.Column="1" 
                    SelectedDate="{Binding DateOfBirth}"
                    SelectedDateFormat="Long"
                    DisplayDateEnd="{x:Static sys:DateTime.Now}"
                    Margin="{StaticResource TopMarginSeparation}">
            <!-- https://social.msdn.microsoft.com/Forums/vstudio/en-US/60c13d35-6189-4e8f-974d-470b60b2c655/wpf-how-to-make-the-datepickertext-field-display-in-center-vertically?forum=wpf -->
            <DatePicker.Resources>
                <Style TargetType="{x:Type DatePickerTextBox}">
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <!-- https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings -->
                                <TextBox x:Name="PART_TextBox" 
                                         VerticalContentAlignment="Center" 
                                         VerticalAlignment="Stretch" 
                                         Margin="-3,-3,0,-3"
                                         Text="{Binding Path=SelectedDate, RelativeSource={RelativeSource AncestorType=DatePicker}, StringFormat=D}" />
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </DatePicker.Resources>
        </DatePicker>
        <Button Grid.Row="3" Grid.Column="4"
                Name="BtnAddPersonToTable"
                Margin="{StaticResource TopMarginSeparation}"
                IsEnabled="{Binding IsReady, Mode=OneWay}"
                Content="Add Person to Table"
                Click="BtnAddPersonToTable_Click"/>
    </Grid>
</usercontrols:UserControlBase>
