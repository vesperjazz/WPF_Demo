<usercontrols:UserControlBase xmlns:usercontrols="clr-namespace:WPFDemo.UserControls"
                              x:Class="WPFDemo.UserControls.SynchronousAndAsynchronousControl.SynchronousAndAsynchronous"
                              xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                              xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                              xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                              xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                              xmlns:local="clr-namespace:WPFDemo"
                              xmlns:converters="clr-namespace:WPFDemo.Converters"
                              mc:Ignorable="d" d:DesignHeight="450" d:DesignWidth="800">
    <usercontrols:UserControlBase.Resources>
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>
        <converters:ApplicationStateToMessageConverter x:Key="ApplicationStateToMessageConverter"/>
    </usercontrols:UserControlBase.Resources>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="20"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Grid.Column="0" 
              Margin="{StaticResource TopMarginSeparation}">
            <ProgressBar Name="PrgsBr"
                         Minimum="0" Maximum="{Binding Model.MaximumProgressBar, Mode=OneTime}"/>
            <TextBlock HorizontalAlignment="Center" 
                       VerticalAlignment="Center"
                       Text="{Binding ElementName=PrgsBr, Path=Value, StringFormat={}{0:0}%}"/>
        </Grid>

        <Grid Grid.Row="1" Grid.Column="0" Grid.RowSpan="2"
              Margin="{StaticResource TopMarginSeparation}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="100"/>
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0">
                <TextBlock TextWrapping="Wrap">
                    <TextBlock.Style>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <!-- All property bindings that belong to this particular UserControl has to be a relative source. --> 
                                <!-- Key to understanding relative source is knowing the DataContext. Is the property that is being bound 
                                     part of the DataContext? If not, relative source must be used!! -->
                                <!-- In this case, the DataContext is SynchronousAndAsynchronousViewModel and the ApplicationState belongs to the SynchronousAndAsynchronous class. -->
                                <DataTrigger Binding="{Binding ApplicationState, RelativeSource={RelativeSource AncestorType=UserControl}}" Value="Default">
                                    <Setter Property="Text" Value="Click one of the simulations to begin..." />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ApplicationState, RelativeSource={RelativeSource AncestorType=UserControl}}" Value="NonResponsive">
                                    <Setter Property="Text" Value="UI thread is busy, try dragging the window or click on any controls..." />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ApplicationState, RelativeSource={RelativeSource AncestorType=UserControl}}" Value="Responsive">
                                    <Setter Property="Text" Value="UI thread is free and task CANNOT be cancelled, try dragging the window or click on any controls..." />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ApplicationState, RelativeSource={RelativeSource AncestorType=UserControl}}" Value="ResponsiveCancellable">
                                    <Setter Property="Text" Value="UI thread is free and task CAN be cancelled, try dragging the window or click on any controls..." />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>
                <!-- This line works exactly the same as the previous block of textblock, by using a converter instead. -->
                <!--<TextBlock TextWrapping="Wrap" Text="{Binding ApplicationState, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource ApplicationStateToMessageConverter}}"/>-->
            </Label>
            <Button Grid.Row="0" Grid.Column="1"
                    Name="BtnClearProgressBar" 
                    Margin="10,0,0,0"
                    IsEnabled="{Binding IsTaskCancellable, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource InverseBooleanConverter}}"
                    HorizontalAlignment="Stretch"
                    VerticalAlignment="Top"
                    Content="Clear" 
                    Click="BtnClearProgressBar_Click"/>
        </Grid>
        
        <Button Grid.Row="0" Grid.Column="2" 
                Name="BtnSynchronousTask"
                Margin="{StaticResource TopMarginSeparation}"
                IsEnabled="{Binding IsTaskCancellable, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource InverseBooleanConverter}}"
                Content="Simulate Synchronous Long Running Task" 
                Click="BtnSynchronousTask_Click"/>

        <Button Grid.Row="1" Grid.Column="2"
                Name="BtnAsynchronousTask"
                Margin="{StaticResource TopMarginSeparation}"
                IsEnabled="{Binding IsTaskCancellable, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource InverseBooleanConverter}}"
                Content="Simulate Asynchronous Long Running Task"
                Click="BtnAsynchronousTask_Click"/>

        <DockPanel Grid.Row="2" Grid.Column="2" 
                   Margin="{StaticResource TopMarginSeparation}">
            <Button Name="BtnAsychronousCancelTask" 
                    IsEnabled="{Binding IsTaskCancellable, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource InverseBooleanConverter}}"
                    Content="Simulate Asynchronous Long Running Task"
                    Click="BtnAsychronousCancelTask_Click"/>
            <Button Name="BtnCancelTask"
                    Margin="5,0,0,0"
                    IsEnabled="{Binding IsTaskCancellable, RelativeSource={RelativeSource AncestorType=UserControl}}"
                    Content="Cancel" 
                    Click="BtnCancelTask_Click"/>
        </DockPanel>
    </Grid>
</usercontrols:UserControlBase>
